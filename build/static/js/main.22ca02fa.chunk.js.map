{"version":3,"sources":["conifg-dev.js","App.js","serviceWorker.js","index.js"],"names":["submitContactFormURL","ContactForm","props","sendContactForm","evt","preventDefault","console","log","messageData","name","refs","value","email","message","fetch","conifg","method","mode","headers","body","JSON","stringify","then","response","json","setState","catch","error","contactForm","reset","state","ref","htmlFor","type","required","rows","cols","onClick","this","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uOAAc,G,MAAA,CACVA,qBAAsB,iF,ICUpBC,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAMRC,gBAAkB,SAACC,GACjBA,EAAIC,iBACJC,QAAQC,IAAI,uBACZ,IAAMC,EAAc,CAClBC,KAAM,EAAKC,KAAKD,KAAKE,MACrBC,MAAO,EAAKF,KAAKE,MAAMD,MACvBE,QAAS,EAAKH,KAAKG,QAAQF,OAE7BL,QAAQC,IAAI,WAAaC,GAE3BM,MAAMC,EAAOf,qBAAsB,CACjCgB,OAAQ,OACRC,KAAM,OACNC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAUb,KAEtBc,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACJjB,QAAQC,IAAI,YAAcgB,GAC1B,EAAKE,SAAS,CAACZ,QAASU,EAASV,aAElCa,OAAM,SAAAC,GAAK,OAAIrB,QAAQC,IAAI,SAAWoB,MAErC,EAAKjB,KAAKkB,YAAYC,SA3BtB,EAAKC,MAAQ,CACXjB,QAAS,IAJM,E,sEAiCjB,OACE,0BAAMkB,IAAI,eACR,0CACA,2BAAOC,QAAQ,QAAf,oBACA,2BAAOD,IAAI,OAAOE,KAAK,OAAOC,UAAQ,IACtC,6BACA,2BAAOF,QAAQ,SAAf,6BACA,2BAAOD,IAAI,QAAQE,KAAK,QAAQC,UAAQ,IACxC,6BACA,2BAAOF,QAAQ,WAAf,uBACA,8BAAUD,IAAI,UAAUI,KAAK,IAAIC,KAAK,OAEtC,6BACA,6BACA,4BAAQC,QAASC,KAAKnC,iBAAtB,gBACA,6BAAMmC,KAAKR,MAAMjB,c,GAjDC0B,aAsDXC,EA9Df,WACE,OACE,yBAAKC,UAAU,OACf,kBAAC,EAAD,QCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,MAAK,SAAAgC,GACjCA,EAAaC,iB","file":"static/js/main.22ca02fa.chunk.js","sourcesContent":["export default{\n    submitContactFormURL: 'https://7tlje2w99g.execute-api.us-east-1.amazonaws.com/dev/submitContactForm'\n}","import React, { Component } from 'react';\nimport './App.css';\nimport conifg from './conifg-dev';\nfunction App() {\n  return (\n    <div className=\"App\">\n    <ContactForm />\n    </div>\n  );\n}\n\nclass ContactForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      message: \"\"    \n    };\n  }\n  sendContactForm = (evt) => { \n    evt.preventDefault();\n    console.log('clicked in the form');\n    const messageData = {\n      name: this.refs.name.value,\n      email: this.refs.email.value,\n      message: this.refs.message.value\n    };\n    console.log(\"DATA => \" + messageData);\n\n  fetch(conifg.submitContactFormURL, {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\"Content-Type\": \"application/json\"},  \n    body: JSON.stringify(messageData)\n  })\n  .then(response => response.json())\n  .then(response => {\n    console.log(\"Success: \" + response);\n    this.setState({message: response.message})\n  })\n  .catch(error => console.log(\"Error:\" + error))\n\n    this.refs.contactForm.reset();\n  }\n  render() {\n    return (\n      <form ref=\"contactForm\">\n        <h1>Contact Us</h1>\n        <label htmlFor=\"name\">Enter your name:</label>\n        <input ref=\"name\" type=\"text\" required/>\n        <br/>\n        <label htmlFor=\"email\">Enter your email address:</label>\n        <input ref=\"email\" type=\"email\" required/>\n        <br/>\n        <label htmlFor=\"message\">Enter your message:</label>\n        <textarea ref=\"message\" rows=\"6\" cols=\"40\"> \n        </textarea>\n        <br/>\n        <hr/>\n        <button onClick={this.sendContactForm}>Send Message</button>\n        <div>{this.state.message}</div>\n      </form>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}